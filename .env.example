# ============================================================================
# SUDOKU MULTIPLAYER - ENVIRONMENT VARIABLES
# ============================================================================
#
# Copy this file to .env and fill in your actual values
# DO NOT commit .env to version control!
#

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# PostgreSQL database URL (for production)
# Format: postgresql://username:password@host:port/database
# Example: postgresql://myuser:mypassword@localhost:5432/sudoku
DATABASE_URL=postgresql://username:password@localhost:5432/sudoku

# Note: If DATABASE_URL is not set, the app will use SQLite in development mode
# SQLite file will be created at: server/sudoku.db


# ============================================================================
# AUTHENTICATION & SECURITY
# ============================================================================

# JWT Secret Keys (CHANGE THESE IN PRODUCTION!)
# Generate secure random strings for production:
# python3 -c "import secrets; print(secrets.token_urlsafe(32))"
JWT_SECRET=dev-secret-key-change-in-production
JWT_REFRESH_SECRET=dev-refresh-secret-change-in-production

# Session Secret (for Flask sessions)
SECRET_KEY=dev-session-secret-change-in-production


# ============================================================================
# EMAIL CONFIGURATION (SendGrid)
# ============================================================================

# SendGrid API Key
# Get yours at: https://app.sendgrid.com/settings/api_keys
SENDGRID_API_KEY=your_sendgrid_api_key_here

# From Email Address
# This email must be verified in SendGrid
FROM_EMAIL=noreply@yourdomain.com

# Application Domain (for email links)
# Use your actual domain in production
DOMAIN=http://localhost:5000


# ============================================================================
# RATE LIMITING (Redis)
# ============================================================================

# Redis URL (for rate limiting and caching)
# Format: redis://host:port/db_number
# Leave empty to use in-memory storage (not recommended for production)
REDIS_URL=redis://localhost:6379/0

# For Redis Cloud or Heroku Redis:
# REDIS_URL=redis://username:password@host:port/0


# ============================================================================
# SERVER CONFIGURATION
# ============================================================================

# Flask Environment
# Options: development, production
FLASK_ENV=development

# Server Port
PORT=5000

# Server Host
HOST=0.0.0.0


# ============================================================================
# CORS CONFIGURATION
# ============================================================================

# Allowed origins for CORS (comma-separated)
# Example: https://yourdomain.com,https://www.yourdomain.com
CORS_ORIGINS=*


# ============================================================================
# OPTIONAL: LOGGING & MONITORING
# ============================================================================

# Log Level
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Sentry DSN (for error tracking - optional)
# Get yours at: https://sentry.io
# SENTRY_DSN=your_sentry_dsn_here


# ============================================================================
# DEPLOYMENT NOTES
# ============================================================================
#
# PRODUCTION CHECKLIST:
#
# 1. Database:
#    - Set DATABASE_URL to your PostgreSQL instance
#    - Run database migrations if needed
#
# 2. Security:
#    - Generate new JWT_SECRET and JWT_REFRESH_SECRET
#    - Generate new SECRET_KEY
#    - All secrets should be long random strings
#
# 3. Email:
#    - Set up SendGrid account and get API key
#    - Verify your FROM_EMAIL address in SendGrid
#    - Set DOMAIN to your actual domain (with https://)
#
# 4. Rate Limiting:
#    - Set up Redis instance (Redis Cloud, Heroku Redis, etc.)
#    - Set REDIS_URL to your Redis connection string
#
# 5. Environment:
#    - Set FLASK_ENV=production
#    - Set appropriate LOG_LEVEL
#    - Configure CORS_ORIGINS to your frontend domains
#
# 6. Server:
#    - Use production-grade server (gunicorn, etc.)
#    - Set up SSL/HTTPS
#    - Configure firewall and security groups
#
# ============================================================================
